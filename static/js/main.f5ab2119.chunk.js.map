{"version":3,"sources":["logo.svg","helpers/dagre-utils.ts","store/ClusterDefinition.ts","store/ViewState.ts","store/Contexts.ts","store/Connection.ts","components/LoadPanel.tsx","components/DefinitionsEditor.tsx","components/DefinitionsGraph.tsx","components/GraphToolbar.tsx","components/Header.tsx","store/AppStateStore.tsx","containers/App.tsx","registerServiceWorker.ts","index.tsx"],"names":["module","exports","size","height","width","distributeElements","model","clonedModel","_","nodes","map","node","id","metadata","mapElements","edges","links","link","from","source","to","target","filter","item","find","mapEdges","graph","dagre","Graph","setGraph","rankdir","ranksep","setDefaultEdgeLabel","forEach","setNode","edge","setEdge","distributeGraph","modelNode","x","y","exchangeColor","queueColor","serviceColor","state","definition","bindings","exchanges","parameters","policies","queues","vhosts","isValid","validate","editor","data","value","createDefaultClusterDefinition","produce","draft","clusterDefinitionToDagModel","viewState","engine","connectionState","exchangeNodes","queueNodes","nodeLinks","DiagramModel","b","currentVhost","vhost","length","result","current","idx","findIndex","destination","destinationType","destination_type","push","routingKeys","routing_key","deduplicateBindings","binding","inNode","inNodeName","outNodeName","outNode","e","name","undefined","createNode","q","outPort","getOutPorts","addOutPort","inPort","getInPorts","addInPort","createLinkModel","setSourcePort","setTargetPort","showRoutingKeys","key","addLabel","showConnections","consumers","s","queue","service","channel_details","addNode","addLink","outIndex","inOutIndex","index","nodeLink","distributedDiagram","serializeDiagram","deserializedModel","deSerializeDiagram","getDistributedModel","color","DefaultNodeModel","errors","selectVhost","evt","setZoomFunction","toggleShowConnections","toggleShowRoutingKeys","zoomToFit","createDefaultViewState","ClusterDefinitionContext","React","ViewStateContext","ConnectionStateContext","update","LoadPanel","props","handleConnect","preventDefault","connect","handleReload","updateCluster","updateConsumer","a","reload","handleChange","obj","host","cookies","save","path","username","password","setState","load","apiClient","onReload","reloadCallback","isConnected","bind","this","console","log","Axios","create","baseURL","timeout","auth","request","method","url","response","Consumer","clusterDefinition","Input","label","placeholder","onChange","type","Button","onClick","secondary","Icon","content","primary","require","DefinitionsEditor","code","DefinitionsGraph","zoomFunctionSet","SRD","installDefaultFactories","renderDefinitionDiagram","renderMessageBox","Message","error","header","list","attached","icon","info","setDiagramModel","className","diagramEngine","inverseZoom","GraphToolbar","Menu","options","text","generateVhostOptions","Item","Dropdown","selection","VHostMenu","Radio","toggle","checked","Header","fixed","inverted","Container","fluid","as","Image","src","logo","style","marginRight","position","href","AppStateStore","validateDefinitionsJson","next","callback","Provider","children","valueJson","JSON","parse","sort","v1","v2","message","App","Grid","centered","celled","Row","Column","padding","marginTop","marginBottom","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","document","getElementById","URL","process","toString","origin","addEventListener","fetch","status","headers","get","indexOf","ready","unregister","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f5ab2119.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3938d65c.svg\";","// Based on: https://github.com/projectstorm/react-diagrams/blob/master/demos/demo-dagre/dagre-utils.ts\r\n\r\nimport * as dagre from \"dagre\";\r\nimport * as _ from \"lodash\";\r\n\r\nconst size = {\r\n\theight: 30,\r\n\twidth: 180\r\n};\r\n\r\nexport function distributeElements(model) {\r\n\tconst clonedModel = _.cloneDeep(model);\r\n\tconst nodes = distributeGraph(clonedModel);\r\n\tnodes.forEach(node => {\r\n\t\tconst modelNode = clonedModel.nodes.find(item => item.id === node.id);\r\n\t\tmodelNode.x = node.x;\r\n\t\tmodelNode.y = node.y;\r\n\t});\r\n\treturn clonedModel;\r\n}\r\n\r\nfunction distributeGraph(model) {\r\n\tconst nodes = mapElements(model);\r\n\tconst edges = mapEdges(model);\r\n\tconst graph = new dagre.graphlib.Graph();\r\n\tgraph.setGraph({ rankdir: \"LR\", ranksep: 100 });\r\n\tgraph.setDefaultEdgeLabel(() => ({}));\r\n\t// add elements to dagre graph\r\n\tnodes.forEach(node => {\r\n\t\tgraph.setNode(node.id, node.metadata);\r\n\t});\r\n\tedges.forEach(edge => {\r\n\t\tif (edge.from && edge.to) {\r\n\t\t\tgraph.setEdge(edge.from, edge.to);\r\n\t\t}\r\n\t});\r\n\t// auto-distribute\r\n\tdagre.layout(graph);\r\n\treturn graph.nodes().map(node => graph.node(node));\r\n}\r\n\r\nfunction mapElements(model) {\r\n\t// dagre compatible format\r\n\treturn model.nodes.map(node => ({ id: node.id, metadata: { ...size, id: node.id } }));\r\n}\r\n\r\nfunction mapEdges(model) {\r\n\t// returns links which connects nodes\r\n\t// we check are there both from and to nodes in the model. Sometimes links can be detached\r\n\treturn model.links\r\n\t\t.map(link => ({\r\n\t\t\tfrom: link.source,\r\n\t\t\tto: link.target\r\n\t\t}))\r\n\t\t.filter(\r\n\t\t\titem => model.nodes.find(node => node.id === item.from) && model.nodes.find(node => node.id === item.to)\r\n\t\t);\r\n}","import produce from 'immer';\r\nimport { DefaultLinkModel, DefaultNodeModel, DiagramEngine, DiagramModel, LinkModel } from \"storm-react-diagrams\";\r\nimport { distributeElements } from \"../helpers/dagre-utils\";\r\nimport { IViewState } from \"./ViewState\";\r\nimport { IConsumer, IConnectionState } from './Connection';\r\n\r\nconst exchangeColor = \"rgb(0,192,255)\";\r\nconst queueColor = \"rgb(192,255,0)\";\r\nconst serviceColor = \"rgb(153,0,147)\";\r\n\r\nexport interface IVhost {\r\n  name: string;\r\n}\r\n\r\nexport interface IPolicy {\r\n  vhost: string;\r\n  name: string;\r\n  pattern: string;\r\n  \"apply-to\": string;\r\n  definition: { [parameter: string]: { value: any } };\r\n  priority: number;\r\n}\r\n\r\nexport interface IQueue {\r\n  name: string;\r\n  vhost: string;\r\n  durable?: boolean;\r\n  auto_delete?: boolean;\r\n  arguments?: object;\r\n}\r\n\r\nexport interface IExchange {\r\n  name: string;\r\n  vhost: string;\r\n  type: string;\r\n  durable: boolean;\r\n  auto_delete: boolean;\r\n  internal: boolean;\r\n  arguments: object;\r\n}\r\n\r\nexport interface IBinding {\r\n  source: string;\r\n  vhost: string;\r\n  destination: string;\r\n  destination_type: string;\r\n  routing_key: string;\r\n  arguments: object;\r\n}\r\n\r\nexport interface IDefinition {\r\n  vhosts: IVhost[];\r\n  parameters: any[];\r\n  policies: IPolicy[];\r\n  queues: IQueue[];\r\n  exchanges: IExchange[];\r\n  bindings: IBinding[];\r\n}\r\n\r\nexport interface IClusterDefinition {\r\n  definition: IDefinition;\r\n\r\n  validate: (editor: any, data: any, value: string) => void;\r\n  isValid: boolean;\r\n}\r\n\r\ninterface IBindingCollection {\r\n  source: string;\r\n  destination: string;\r\n  destinationType: string;\r\n  vhost: string;\r\n  routingKeys: string[];\r\n}\r\n\r\nconst state: IClusterDefinition = {\r\n  definition: {\r\n    bindings: [],\r\n    exchanges: [],\r\n    parameters: [],\r\n    policies: [],\r\n    queues: [],\r\n    vhosts: []\r\n  },\r\n  isValid: true,\r\n  validate: (editor: any, data: any, value: string) => null,\r\n};\r\n\r\nexport function createDefaultClusterDefinition(): IClusterDefinition {\r\n  return produce<IClusterDefinition>(state, draft => {\r\n    draft.isValid = true;\r\n  });\r\n}\r\n\r\nexport function clusterDefinitionToDagModel(definition: IDefinition, viewState: IViewState, engine: DiagramEngine, connectionState: IConnectionState): DiagramModel {\r\n  const exchangeNodes: DefaultNodeModel[] = [];\r\n  const queueNodes: DefaultNodeModel[] = [];\r\n  const nodeLinks: LinkModel[] = [];\r\n  const model = new DiagramModel();\r\n\r\n  const bindings = definition.bindings.filter(b => viewState.currentVhost === \"All\" || b.vhost === viewState.currentVhost);\r\n  const dedupedBindings = bindings.length > 0 ? deduplicateBindings(bindings) : [];\r\n\r\n  dedupedBindings.forEach(binding => {\r\n    const vhost = binding.vhost;\r\n    const outNodeName = `Exchange: ${binding.source} ${viewState.currentVhost === \"All\" ? `(${vhost})` : \"\"}`;\r\n    let outNode = exchangeNodes.find(e => e.name === outNodeName);\r\n\r\n    if (outNode === undefined) {\r\n      outNode = createNode(outNodeName, exchangeColor);\r\n      exchangeNodes.push(outNode);\r\n    }\r\n\r\n    let inNode: DefaultNodeModel | undefined;\r\n    let inNodeName: string;\r\n\r\n    if (binding.destinationType === \"queue\") {\r\n      inNodeName = `Queue: ${binding.destination} ${viewState.currentVhost === \"All\" ? `(${vhost})` : \"\"}`;\r\n      inNode = queueNodes.find(q => q.name === inNodeName);\r\n\r\n      if (inNode === undefined) {\r\n        inNode = createNode(inNodeName, queueColor);\r\n        queueNodes.push(inNode);\r\n      }\r\n    }\r\n    else {\r\n      inNodeName = `Exchange: ${binding.destination} ${viewState.currentVhost === \"All\" ? `(${vhost})` : \"\"}`;\r\n      inNode = exchangeNodes.find(q => q.name === inNodeName);\r\n\r\n      if (inNode === undefined) {\r\n        inNode = createNode(inNodeName, exchangeColor);\r\n        exchangeNodes.push(inNode);\r\n      }\r\n    }\r\n\r\n    const outPort = outNode.getOutPorts().length > 0 ? outNode.getOutPorts()[0] : outNode.addOutPort(\"Out\");\r\n    const inPort = inNode.getInPorts().length > 0 ? inNode.getInPorts()[0] : inNode.addInPort(\"In\");\r\n\r\n    const link = outPort.createLinkModel() as DefaultLinkModel;\r\n    link.setSourcePort(outPort);\r\n    link.setTargetPort(inPort);\r\n\r\n    if (viewState.showRoutingKeys) {\r\n      binding.routingKeys.forEach(key => link.addLabel(key));\r\n    }\r\n\r\n    if (viewState.showConnections && binding.destinationType === 'queue') {\r\n      connectionState.consumers\r\n        .filter(s => s.queue.name === binding.destination)\r\n        .forEach(service => {\r\n          if (inNode === undefined) {\r\n            return;\r\n          }\r\n\r\n          const node = createNode(service.channel_details.name, serviceColor);\r\n          node.x = 300;\r\n          node.y = 200;\r\n\r\n          const inPort = node.addInPort('In');\r\n          const outPort = inNode.getOutPorts().length > 0 ? inNode.getOutPorts()[0] : inNode.addOutPort('Out');\r\n\r\n          const link = inPort.createLinkModel();\r\n          link.setSourcePort(outPort);\r\n          link.setTargetPort(inPort);\r\n\r\n          model.addNode(node);\r\n          model.addLink(link);\r\n        });\r\n    }\r\n\r\n    nodeLinks.push(link);\r\n  });\r\n\r\n  let outIndex = 1;\r\n  let inOutIndex = 1;\r\n\r\n  exchangeNodes.forEach(node => {\r\n    if (node.getInPorts().length > 0 && node.getOutPorts().length > 0) {\r\n      node.x = 300;\r\n      node.y = inOutIndex * 70;\r\n      inOutIndex++;\r\n    }\r\n    else {\r\n      node.x = 70;\r\n      node.y = outIndex * 70;\r\n      outIndex++;\r\n    }\r\n    model.addNode(node);\r\n  });\r\n\r\n  queueNodes.forEach((node, index) => {\r\n    node.x = 530;\r\n    node.y = (index + 1) * 70;\r\n    model.addNode(node);\r\n  });\r\n\r\n  nodeLinks.forEach(nodeLink => {\r\n    model.addLink(nodeLink);\r\n  })\r\n\r\n  return getDistributedModel(engine, model);\r\n}\r\n\r\nfunction deduplicateBindings(bindings: IBinding[]): IBindingCollection[] {\r\n  const result: IBindingCollection[] = [];\r\n\r\n  bindings.forEach(current => {\r\n    const idx = result.findIndex(b => {\r\n      return b.vhost === current.vhost &&\r\n        b.source === current.source &&\r\n        b.destination === current.destination &&\r\n        b.destinationType === current.destination_type;\r\n    });\r\n\r\n    if (idx === -1) {\r\n      result.push({\r\n        destination: current.destination,\r\n        destinationType: current.destination_type,\r\n        routingKeys: current.routing_key === \"\" ? [] : [current.routing_key],\r\n        source: current.source,\r\n        vhost: current.vhost\r\n      });\r\n    }\r\n    else {\r\n      if (current.routing_key !== \"\") {\r\n        result[idx].routingKeys.push(current.routing_key);\r\n      }\r\n    }\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nfunction createNode(name: string, color: string = \"rgb(0,192,255)\"): DefaultNodeModel {\r\n  return new DefaultNodeModel(name, color);\r\n}\r\n\r\nfunction getDistributedModel(engine: DiagramEngine, model: DiagramModel): DiagramModel {\r\n  const distributedDiagram = distributeElements(model.serializeDiagram());\r\n\r\n  const deserializedModel = new DiagramModel();\r\n  deserializedModel.deSerializeDiagram(distributedDiagram, engine);\r\n  return deserializedModel;\r\n}","import produce from 'immer';\r\n\r\nexport interface IViewState {\r\n  readonly currentVhost: string;\r\n  readonly errors: string[];\r\n  readonly showRoutingKeys: boolean;\r\n  readonly showConnections: boolean;\r\n  selectVhost(evt, data): void;\r\n  setZoomFunction(callback: () => void): void;\r\n  toggleShowConnections(): void;\r\n  toggleShowRoutingKeys(): void;\r\n  zoomToFit(): void;\r\n}\r\n\r\nconst state: IViewState = {\r\n  currentVhost: \"\",\r\n  errors: [],\r\n  selectVhost: (evt, data) => null,\r\n  setZoomFunction: () => null,\r\n  showRoutingKeys: true,\r\n  showConnections: false,\r\n  toggleShowConnections: () => null,\r\n  toggleShowRoutingKeys: () => null,\r\n  zoomToFit: () => null\r\n};\r\n\r\nexport function createDefaultViewState() : IViewState {\r\n  return produce<IViewState>(state, draft => {\r\n    draft.currentVhost = \"All\";\r\n  });\r\n}","import * as React from 'react';\r\n\r\nimport { createDefaultClusterDefinition, IClusterDefinition } from '../store/ClusterDefinition';\r\nimport { createDefaultViewState, IViewState } from '../store/ViewState';\r\nimport { createDefaultConnectionState, IConnectionState } from './Connection';\r\n\r\nexport const ClusterDefinitionContext = React.createContext<IClusterDefinition>(createDefaultClusterDefinition());\r\n\r\nexport const ViewStateContext = React.createContext<IViewState>(createDefaultViewState());\r\n\r\nexport const ConnectionStateContext = React.createContext<IConnectionState>(createDefaultConnectionState());","import produce from 'immer';\r\nimport { IQueue } from './ClusterDefinition';\r\n\r\n/*\r\nexport interface IClientProperties {\r\n  conntected: string;\r\n  connection_name: string | undefined;\r\n  machine_name: string;\r\n  platform: string;\r\n  user: string;\r\n  version: string;\r\n}\r\n*/\r\n\r\nexport interface IChannel {\r\n  connection_name: string,\r\n  name: string,\r\n  node: string,\r\n  peer_host: string,\r\n  peer_port: string,\r\n  user: string,\r\n}\r\n\r\nexport interface IConsumer {\r\n  active: boolean,\r\n  channel_details: IChannel,\r\n  queue: IQueue,\r\n}\r\n\r\nexport interface IConnectionState {\r\n  consumers: IConsumer[],\r\n  update?: (consumers: IConsumer[]) => void,\r\n}\r\n\r\nexport function createDefaultConnectionState() : IConnectionState {\r\n  return {\r\n    consumers: [],\r\n    update: (consumers: IConsumer[]) => null,\r\n  };\r\n}","import * as React from 'react';\r\nimport { Button, Icon, Input } from 'semantic-ui-react';\r\nimport Axios, { AxiosInstance } from 'axios';\r\nimport cookies from 'react-cookies'\r\nimport { ClusterDefinitionContext, ConnectionStateContext } from '../store/Contexts';\r\nimport { IConsumer, IConnectionState, createDefaultConnectionState } from '../store/Connection';\r\n\r\ntype ReloadFunction = (value: string) => void;\r\n\r\ninterface ILoadPanelState {\r\n    apiClient: AxiosInstance | null,\r\n    onReload: ReloadFunction,\r\n    isConnected: boolean,\r\n    host: string,\r\n    username: string,\r\n    password: string,\r\n    connectionState: IConnectionState,\r\n}\r\n\r\nclass LoadPanel extends React.Component<{}, ILoadPanelState> {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const host = cookies.load('host') || 'localhost:15672';\r\n        const username = cookies.load('username') || 'guest';\r\n        const password = cookies.load('password') || 'guest';\r\n\r\n        this.state = {\r\n            apiClient: null,\r\n            onReload: props.reloadCallback,\r\n            isConnected: false,\r\n            host,\r\n            username,\r\n            password,\r\n            connectionState: createDefaultConnectionState(),\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleReload = this.handleReload.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.connect();\r\n    }\r\n\r\n    async connect() {\r\n        console.log('connecting...');\r\n        try {\r\n            const apiClient = Axios.create({\r\n                baseURL: `http://${this.state.host}/api/`,\r\n                timeout: 10000,\r\n                auth: {\r\n                    username: this.state.username,\r\n                    password: this.state.password,\r\n                }\r\n            });\r\n\r\n            await apiClient.request({ method: 'get', url: 'definitions' });\r\n\r\n            this.setState({ apiClient, isConnected: true });\r\n\r\n            console.log('connection successful...');\r\n        } catch {\r\n            this.setState({ isConnected: false });\r\n\r\n            console.log('connection failed...');\r\n        }\r\n    }\r\n\r\n    async reload(): Promise<any[]> {\r\n        if (this.state.apiClient === null) {\r\n            return [];\r\n        }\r\n\r\n        const definition = await this.state.apiClient.request({ method: 'get', url: 'definitions' });\r\n        const consumers = await this.state.apiClient.request({ method: 'get', url: 'consumers' });\r\n\r\n        return [definition.request.response, consumers.data as IConsumer[]];\r\n    };\r\n\r\n    handleConnect = e => {\r\n        e.preventDefault();\r\n        this.connect();\r\n    };\r\n\r\n    handleReload = (updateCluster, updateConsumer) => {\r\n        return async e => {\r\n            e.preventDefault();\r\n            const [definition, consumers] = await this.reload();\r\n\r\n            updateCluster(null, null, definition);\r\n            updateConsumer(consumers);\r\n        };\r\n    }\r\n\r\n    handleChange = e => {\r\n        const name = e.target.name;\r\n        const value = e.target.value;\r\n\r\n        let obj: any;\r\n        if (name === 'host') {\r\n            obj = { host: value };\r\n            cookies.save('host', value, { path: '/' });\r\n        } else if (name === 'username') {\r\n            obj = { username: value };\r\n            cookies.save('username', value, { path: '/' });\r\n        } else if (name === 'password') {\r\n            obj = { password: value };\r\n            cookies.save('password', value, { path: '/' });\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        this.setState(obj);\r\n    };\r\n\r\n    public render() {\r\n        return (\r\n            <ClusterDefinitionContext.Consumer>\r\n                {clusterDefinition => (\r\n                    <ConnectionStateContext.Consumer>\r\n                        {connectionState => (\r\n                            <form>\r\n                                <Input\r\n                                    name=\"host\"\r\n                                    label=\"Host\"\r\n                                    placeholder=\"Hostname (address:port)\"\r\n                                    onChange={this.handleChange}\r\n                                    value={this.state.host} /><br />\r\n                                <Input\r\n                                    name=\"username\"\r\n                                    label=\"Username\"\r\n                                    placeholder=\"Username\"\r\n                                    onChange={this.handleChange}\r\n                                    value={this.state.username} />\r\n                                <Input\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    label=\"Password\"\r\n                                    placeholder=\"Password\"\r\n                                    onChange={this.handleChange}\r\n                                    value={this.state.password} /><br />\r\n                                <Button onClick={this.handleConnect} secondary><Icon name={this.state.isConnected ? 'check' : 'ban'} /> Connect</Button>\r\n                                <Button content=\"Reload\" onClick={this.handleReload(clusterDefinition.validate, connectionState.update)} primary />\r\n                            </form>\r\n                        )}\r\n                    </ConnectionStateContext.Consumer>\r\n                )}\r\n            </ClusterDefinitionContext.Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoadPanel;","import * as React from 'react';\r\n//import { UnControlled as CodeMirror } from 'react-codemirror2';\r\n\r\nimport { ClusterDefinitionContext } from '../store/Contexts';\r\nimport LoadPanel from './LoadPanel';\r\n\r\n// tslint:disable-next-line:no-var-requires\r\nrequire('codemirror/mode/javascript/javascript');\r\n\r\ninterface IEditorState {\r\n  code: string\r\n}\r\n\r\nclass DefinitionsEditor extends React.Component<{}, IEditorState> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      code: \"\"\r\n    };\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <ClusterDefinitionContext.Consumer>\r\n        {clusterDefinition => (\r\n          <div>\r\n            <LoadPanel />\r\n            {/*<CodeMirror\r\n              value={this.state.code}\r\n              options={{\r\n                lineNumbers: true,\r\n                mode: 'application/json',\r\n                theme: 'material'\r\n              }}\r\n              onChange={clusterDefinition.validate} />\r\n              */}\r\n          </div>\r\n        )}\r\n      </ClusterDefinitionContext.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DefinitionsEditor;","import * as React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\nimport * as SRD from 'storm-react-diagrams';\r\nimport 'storm-react-diagrams/dist/style.min.css';\r\n\r\nimport { clusterDefinitionToDagModel, IClusterDefinition } from '../store/ClusterDefinition';\r\nimport { ClusterDefinitionContext, ViewStateContext, ConnectionStateContext } from '../store/Contexts';\r\nimport { IConnectionState } from '../store/Connection';\r\nimport { IViewState } from '../store/ViewState';\r\n\r\nclass DefinitionsGraph extends React.Component {\r\n  private engine: SRD.DiagramEngine;\r\n  private zoomFunctionSet: boolean;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.engine = new SRD.DiagramEngine();\r\n    this.engine.installDefaultFactories();\r\n    this.zoomFunctionSet = false;\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <ViewStateContext.Consumer>\r\n        {viewState => (\r\n          <ConnectionStateContext.Consumer>\r\n            {connectionState =>\r\n              <ClusterDefinitionContext.Consumer>\r\n                {clusterDefinition =>\r\n                  clusterDefinition.definition.vhosts.length > 0 ?\r\n                    this.renderDefinitionDiagram(clusterDefinition, viewState, connectionState) : this.renderMessageBox(viewState)\r\n                }\r\n              </ClusterDefinitionContext.Consumer>\r\n            }\r\n          </ConnectionStateContext.Consumer>\r\n        )}\r\n      </ViewStateContext.Consumer>\r\n    )\r\n  }\r\n\r\n  private renderMessageBox(viewState: IViewState) {\r\n    const engine = new SRD.DiagramEngine();\r\n    engine.installDefaultFactories();\r\n\r\n    if (viewState.errors.length > 0) {\r\n      return (\r\n        <Message\r\n          error={true}\r\n          header=\"Invalid broker definition json\"\r\n          list={viewState.errors}\r\n          attached=\"top\"\r\n          icon=\"exclamation circle\" />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Message\r\n        content=\"Please load a broker definition using the editor panel.\"\r\n        header=\"No Broker Definition Present\"\r\n        info={true}\r\n        attached=\"top\"\r\n        icon=\"info circle\" />\r\n    );\r\n  }\r\n\r\n  private renderDefinitionDiagram(clusterDefinition: IClusterDefinition, viewState: IViewState, connectionState: IConnectionState) {\r\n    const model = clusterDefinitionToDagModel(clusterDefinition.definition, viewState, this.engine, connectionState);\r\n    this.engine.setDiagramModel(model);\r\n\r\n    if (!this.zoomFunctionSet) {\r\n      viewState.setZoomFunction(() => {\r\n        this.engine.zoomToFit();\r\n      });\r\n      this.zoomFunctionSet = true;\r\n    }\r\n\r\n    return <SRD.DiagramWidget\r\n      className=\"srd-canvas\"\r\n      diagramEngine={this.engine}\r\n      inverseZoom={true} />;\r\n  }\r\n}\r\n\r\nexport default DefinitionsGraph;","import * as React from 'react';\r\nimport { Button, Dropdown, Menu, Radio } from 'semantic-ui-react';\r\nimport { IVhost } from '../store/ClusterDefinition';\r\nimport { ClusterDefinitionContext, ViewStateContext } from '../store/Contexts';\r\n\r\nconst GraphToolbar = () => (\r\n  <ViewStateContext.Consumer>\r\n    {viewState => (\r\n      <ClusterDefinitionContext.Consumer>\r\n        {clusterDefinition => (\r\n          clusterDefinition.definition.vhosts.length > 0 ? (\r\n            <Menu attached=\"top\">\r\n              {VHostMenu(clusterDefinition.definition.vhosts, viewState.currentVhost, viewState.selectVhost)}\r\n              <Menu.Item>\r\n                <Radio\r\n                  toggle={true}\r\n                  label=\"Show Routing Keys\"\r\n                  onChange={viewState.toggleShowRoutingKeys}\r\n                  checked={viewState.showRoutingKeys} />\r\n              </Menu.Item>\r\n              <Menu.Item>\r\n                <Radio\r\n                  toggle={true}\r\n                  label=\"Show Connections\"\r\n                  onChange={viewState.toggleShowConnections}\r\n                  checked={viewState.showConnections} />\r\n              </Menu.Item>\r\n              <Menu.Item>\r\n                <Button\r\n                  onClick={viewState.zoomToFit}\r\n                  content=\"Zoom to Fit\" />\r\n              </Menu.Item>\r\n            </Menu>\r\n          ) : \"\"\r\n        )}\r\n      </ClusterDefinitionContext.Consumer>\r\n    )}\r\n  </ViewStateContext.Consumer>\r\n);\r\n\r\nfunction VHostMenu(vhosts: IVhost[], currentVhost: string, onChange: (evt, data) => void) {\r\n  const options = generateVhostOptions(vhosts);\r\n\r\n  return (\r\n    <Menu.Item>\r\n      Virtual Host:&nbsp;\r\n      <Dropdown\r\n        placeholder=\"Virtual Hosts\"\r\n        value={currentVhost}\r\n        selection={true}\r\n        options={options}\r\n        onChange={onChange} />\r\n    </Menu.Item>\r\n  );\r\n}\r\n\r\nfunction generateVhostOptions(vhosts: IVhost[]) {\r\n  const options = [{ key: \"All\", value: \"All\", text: \"All\" }];\r\n\r\n  vhosts.forEach(vhost => options.push({ key: vhost.name, value: vhost.name, text: vhost.name }));\r\n\r\n  return options;\r\n}\r\n\r\nexport default GraphToolbar;","import * as React from 'react';\r\nimport { Container, Icon, Image, Menu } from 'semantic-ui-react';\r\nimport logo from '../logo.svg';\r\n\r\nclass Header extends React.Component {\r\n  public render() {\r\n    return (\r\n      <Menu fixed=\"top\" inverted={true}>\r\n        <Container fluid={true}>\r\n          <Menu.Item header={true} as=\"h4\">\r\n            <Image size=\"mini\" src={logo} style={{ marginRight: '1.5em' }} />\r\n            Rabbit Viz\r\n          </Menu.Item>\r\n          <Menu.Item position=\"right\" href=\"https://github.com/plexsystems/rabbit-viz\" target=\"_blank\">\r\n            <Icon name=\"github\" size=\"big\" />\r\n            Fork us on GitHub!\r\n          </Menu.Item>\r\n        </Container>\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import produce from 'immer';\r\nimport * as React from 'react';\r\nimport { createDefaultClusterDefinition, IClusterDefinition, IDefinition } from './ClusterDefinition';\r\nimport { ConnectionStateContext, ClusterDefinitionContext, ViewStateContext } from './Contexts';\r\nimport { createDefaultConnectionState, IConnectionState } from './Connection';\r\nimport { createDefaultViewState, IViewState } from './ViewState';\r\n\r\ninterface IAppState {\r\n  clusterDefinition: IClusterDefinition,\r\n  viewState: IViewState,\r\n  connectionState: IConnectionState,\r\n}\r\n\r\nexport default class AppStateStore extends React.Component<{}, IAppState> {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      clusterDefinition: produce<IClusterDefinition>(createDefaultClusterDefinition(), draft => {\r\n        draft.validate = this.validateDefinitionsJson.bind(this)\r\n      }),\r\n\r\n      viewState: produce<IViewState>(createDefaultViewState(), draft => {\r\n        draft.selectVhost = (evt, data) => {\r\n          this.setState(produce<IAppState>(next => {\r\n            next.viewState.currentVhost = data.value;\r\n          }));\r\n        };\r\n\r\n        draft.setZoomFunction = (callback: () => void) => {\r\n          this.setState(produce<IAppState>(next => {\r\n            next.viewState.zoomToFit = callback;\r\n          }));\r\n        };\r\n\r\n        draft.toggleShowRoutingKeys = () => {\r\n          this.setState(produce<IAppState>(next => {\r\n            next.viewState.showRoutingKeys = !next.viewState.showRoutingKeys;\r\n          }));\r\n        };\r\n\r\n        draft.toggleShowConnections = () => {\r\n          this.setState(produce<IAppState>(next => {\r\n            next.viewState.showConnections = !next.viewState.showConnections;\r\n          }))\r\n        };\r\n      }),\r\n\r\n      connectionState: produce<IConnectionState>(createDefaultConnectionState(), draft => {\r\n        draft.update = (consumers) => {\r\n          this.setState(produce<IAppState>(next => {\r\n            next.connectionState.consumers = consumers;\r\n          }));\r\n        };\r\n      }),\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <ViewStateContext.Provider value={this.state.viewState}>\r\n        <ClusterDefinitionContext.Provider value={this.state.clusterDefinition}>\r\n          <ConnectionStateContext.Provider value={this.state.connectionState}>\r\n            {this.props.children}\r\n          </ConnectionStateContext.Provider>\r\n        </ClusterDefinitionContext.Provider>\r\n      </ViewStateContext.Provider>\r\n    );\r\n  }\r\n\r\n  private validateDefinitionsJson(editor: any, data: any, value: string) {\r\n    if (value.length > 0) {\r\n      try {\r\n        const valueJson = JSON.parse(value);\r\n\r\n        valueJson.vhosts = valueJson.vhosts.sort((v1, v2) => {\r\n          if (v1.name > v2.name) { return 1; }\r\n          if (v1.name < v2.name) { return -1; }\r\n          return 0;\r\n        });\r\n\r\n        this.setState(produce<IAppState>(draft => {\r\n          draft.clusterDefinition.isValid = true;\r\n          draft.viewState.errors = [];\r\n          draft.clusterDefinition.definition = valueJson as IDefinition;\r\n        }));\r\n      } catch (error) {\r\n        this.setState(produce<IAppState>(draft => {\r\n          draft.clusterDefinition.isValid = false;\r\n          draft.viewState.errors = [(error as Error).message];\r\n          draft.clusterDefinition.definition = {\r\n            bindings: [],\r\n            exchanges: [],\r\n            parameters: [],\r\n            policies: [],\r\n            queues: [],\r\n            vhosts: []\r\n          };\r\n        }));\r\n        return;\r\n      }\r\n    }\r\n    else {\r\n      this.setState(produce<IAppState>(draft => {\r\n        draft.clusterDefinition.isValid = true;\r\n        draft.viewState.errors = [];\r\n        draft.clusterDefinition.definition = {\r\n          bindings: [],\r\n          exchanges: [],\r\n          parameters: [],\r\n          policies: [],\r\n          queues: [],\r\n          vhosts: []\r\n        };\r\n      }));\r\n    }\r\n  }\r\n}","import * as React from 'react';\r\nimport { Container, Grid, Menu } from 'semantic-ui-react';\r\n\r\nimport DefinitionsEditor from '../components/DefinitionsEditor';\r\nimport DefinitionsGraph from '../components/DefinitionsGraph';\r\nimport GraphToolbar from '../components/GraphToolbar';\r\nimport Header from '../components/Header';\r\nimport AppStateStore from '../store/AppStateStore';\r\n\r\nconst App = () => (\r\n  <AppStateStore>\r\n    <Header />\r\n    <Container fluid={true}>\r\n      <Grid style={{ height: '100vh' }} centered={true} celled=\"internally\">\r\n        <Grid.Row style={{ height: '100%' }}>\r\n          <Grid.Column width={12} style={{ padding: 0, marginTop: '4.5em', marginBottom: '2.5em' }} className=\"srd-container\">\r\n            <GraphToolbar />\r\n            <DefinitionsGraph />\r\n          </Grid.Column>\r\n          <Grid.Column width={4} style={{ padding: 0, marginTop: '4.5em', marginBottom: '2.5em' }}>\r\n            <DefinitionsEditor />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </Container>\r\n    <Menu fixed=\"bottom\" inverted={true}>\r\n      <Menu.Item header={true} position=\"right\">\r\n        © 2019 Plex Systems, Inc. All Rights Reserved.\r\n      </Menu.Item>\r\n    </Menu>\r\n  </AppStateStore>\r\n);\r\n\r\nexport default App;\r\n","// tslint:disable:no-console\r\n// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the 'N+1' visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL!,\r\n      window.location.toString()\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker) {\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a 'New content is\r\n                // available; please refresh.' message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // 'Content is cached for offline use.' message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        }\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type')!.indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nimport 'codemirror/theme/material.css';\r\n\r\nimport App from './containers/App';\r\nimport './index.css';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root') as HTMLElement\r\n);\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}